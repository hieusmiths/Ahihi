{"version":3,"sources":["fireBaseConnect.js","components/Nav.js","components/NoteItem.js","components/ListNote.js","components/NoteForm.js","components/NoteFormForEdit.js","App.js","serviceWorker.js","reducer/FormNoteAdd.js","reducer/Status.js","reducer/GetData.js","reducer/Delete.js","Store.js","index.js"],"names":["firebase","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","fireBaseConnect","ref","Nav","react_default","a","createElement","id","className","href","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","Component","NoteItem","actionOfEditButton","thisValueEdit","_this","props","valueOfNote","changeStatusEdit","getDataItemForEdit","actionOfDeleteButton","GetId","key","deleteNoteById","console","log","_this2","this","index","noteTitle","onClick","aria-labelledby","data-parent","noteContent","connect","dispatch","ownProps","Item","ListNote","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","getData","notesData","state","map","value","components_NoteItem","on","notes","notesArray","forEach","Element","val","push","setState","prop","NoteForm","changEvent","event","name","target","defineProperty","addNote2","title","content","item","addNote","onChange","placeholder","aria-describedby","rows","defaultValue","newItem","NoteFormForEdit","actionForButtonUpdate","getItemToUpdate","dataReive","getDataToEdit","editItemOfNote","App","addData","showFormEdit","isEditForNote","components_NoteFormForEdit","components_Nav","components_ListNote","components_NoteForm","status","Boolean","window","location","hostname","match","noteInitialState","FormNoteAdd","arguments","length","undefined","action","JSON","stringify","statusInitialState","Status","objectSpread","GetDataItemInitialState","GetDataItemForUpdate","child","update","DeleteByIdInitialState","idOfNote","Delete","remove","redux","require","allReducerNote","combineReducers","note","GetData","deleteById","storeForNote","createStore","subscribe","getState","ReactDOM","render","es","store","Store","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ec971aa0.chunk.js","sourcesContent":["import * as firebase from 'firebase';\r\n\r\nvar config = {\r\n    apiKey: \"AIzaSyD4qSP95ywvM6wdGwD37CikPnj2EBHbcZ0\",\r\n    authDomain: \"react-redux-9d165.firebaseapp.com\",\r\n    databaseURL: \"https://react-redux-9d165.firebaseio.com\",\r\n    projectId: \"react-redux-9d165\",\r\n    storageBucket: \"react-redux-9d165.appspot.com\",\r\n    messagingSenderId: \"899996225313\"\r\n  };\r\n  // firebase.initializeApp(config);\r\n  \r\n  firebase.initializeApp(config);\r\n  export const fireBaseConnect = firebase.database().ref('dataForNote');\r\n  // export default fireBaseConnect;\r\n  // All data of firebase will saving called is data Snapshot/\r\n  \r\n\r\n\r\n\r\n  // fireBaseConnect.set({\r\n  //   \"id\" : 1,\r\n  //   \"noteContent\" : \"xxxxxxxxxxxxxxxx\",\r\n  //   \"title\" : \"yyyyyyyyyyyyyyyyyyyy\"\r\n  // });\r\n  // data.once('value').then(function(snapchot){\r\n  //   console.log(snapchot.val());\r\n  // });\r\n","import React, { Component } from 'react';\r\n\r\nclass Nav extends Component {\r\n    render() {\r\n        return (\r\n            <section id=\"menu\">\r\n                <nav className=\"navbar navbar-expand-sm navbar-light bg-dark\">\r\n                    <a className=\"navbar-brand\" href=\"true\">F.edu</a>\r\n                    <button className=\"navbar-toggler d-lg-none\" type=\"button\" data-toggle=\"collapse\" data-target=\"#collapsibleNavId\" aria-controls=\"collapsibleNavId\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                    <span className=\"navbar-toggler-icon\" />\r\n                    </button>\r\n                    <div className=\"collapse navbar-collapse\" id=\"collapsibleNavId\">\r\n                    <ul className=\"navbar-nav ml-auto mt-2 mt-lg-0 pr-5\">\r\n                        <li className=\"nav-item active\">\r\n                        <a className=\"nav-link\" href=\"true\">Home <span className=\"sr-only\">(current)</span></a>\r\n                        </li>\r\n                        <li className=\"nav-item\">\r\n                        <a className=\"nav-link\" href=\"true\">List Note</a>\r\n                        </li>\r\n                    </ul>\r\n                    </div>\r\n                </nav>\r\n                </section>\r\n\r\n        );\r\n    }\r\n}\r\n\r\nexport default Nav;","import React, { Component } from 'react';\r\nimport { connect } from \"react-redux\";\r\nclass NoteItem extends Component {\r\n\r\n    actionOfEditButton = ()=>{\r\nvar thisValueEdit = this.props.valueOfNote;\r\n        \r\n        this.props.changeStatusEdit();\r\n        this.props.getDataItemForEdit(thisValueEdit);\r\n    }\r\n\r\n    actionOfDeleteButton = ()=>{\r\n    var thisValueEdit = this.props.valueOfNote;\r\n        var GetId = thisValueEdit.key;\r\n        this.props.deleteNoteById(GetId);\r\n        console.log(GetId);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div id=\"accordion\">\r\n                    <div className=\"card\">\r\n                    <div className=\"card-header\" id=\"headingThree\">\r\n                        <span className=\"mb-0\">\r\n                        <button  className=\"btn btn-link collapsed\" data-toggle=\"collapse\" data-target={\"#collapse\" + this.props.index } aria-expanded=\"false\" aria-controls=\"collapseThree\">\r\n                            { this.props.noteTitle }\r\n                        </button>\r\n                        </span>\r\n                        <div className=\"btn-group float-lg-right\">\r\n                        <button onClick= { () => this.actionOfEditButton() } className=\"btn btn-info \">Edit</button>\r\n                        <button onClick= { () => this.actionOfDeleteButton() } className=\"btn btn-warning\">Delete</button>\r\n                        </div>\r\n                    </div>\r\n                    <div id={\"collapse\" + this.props.index } className=\"collapse\" aria-labelledby=\"headingThree\" data-parent=\"#accordion\">\r\n                        <div className=\"card-body\">\r\n                        { this.props.noteContent }\r\n                        </div>\r\n                    </div>\r\n                    </div>\r\n                </div>\r\n        );\r\n    }\r\n}\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n    return {\r\n        getDataItemForEdit: (Item) => {\r\n            dispatch({\r\n                type:\"GET_DATA_NOTE_TO_UPDATE\",\r\n                Item\r\n            })\r\n        },\r\n        deleteNoteById : (GetId) =>{\r\n            dispatch({\r\n                type: \"DELETE_NOTE_BY_ID\",\r\n                GetId\r\n            })\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(null, mapDispatchToProps)(NoteItem)","import React, { Component } from 'react';\r\n\r\n// connect with your database\r\nimport { fireBaseConnect } from './../fireBaseConnect';\r\nimport NoteItem from './NoteItem';\r\nimport {connect} from 'react-redux';\r\n\r\n\r\n// get data.\r\n\r\nclass ListNote extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            notesData : []\r\n        }\r\n    }\r\n    \r\n    \r\n    componentWillMount() { // chạy luôn vo render là có data\r\n        fireBaseConnect.on(\"value\", (notes) =>{\r\n            // data trả về là Object do vậy cần Convert it to Array process.\r\n            var notesArray = [] // không sử dụng ngoài on được nên phải setState để Using. \r\n            notes.forEach( Element =>{\r\n                const key = Element.key; // id tự sinh\r\n                const noteTitle = Element.val().noteTitle;\r\n                const noteContent = Element.val().noteContent;\r\n                notesArray.push({\r\n                    key : key,\r\n                    noteTitle : noteTitle,\r\n                    noteContent : noteContent\r\n                }); // đẩy object vào Array.\r\n                this.setState({\r\n                    notesData : notesArray,\r\n                })\r\n            }) \r\n        })\r\n        // Dùng hàm Once thì hay bị lỗi về promise.\r\n    }\r\n    \r\n\r\n    getData = ()=>{\r\n        var notesData = this.state.notesData;\r\n        if(notesData){\r\n            return (\r\n                    notesData.map((value, key ) =>(\r\n\r\n                        <NoteItem\r\n                        \r\n                        key = { key } // không cho truyển nên định nghĩa cái khác :) \r\n                        index = { key }\r\n                        valueOfNote = { value }\r\n                        noteTitle = { value.noteTitle }\r\n                        noteContent = { value.noteContent }\r\n                        changeStatusEdit = { ()  => this.props.changeStatusEdit()}\r\n                        >\r\n                        </NoteItem>\r\n                        \r\n                    ))\r\n                )\r\n        }\r\n    }\r\n    \r\n\r\n    // print it can use forEach or Map.\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"col-9\">\r\n            \r\n                \r\n                { this.getData() }\r\n\r\n            </div>\r\n\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    return {\r\n        prop: state.prop\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n    return {\r\n        changeStatusEdit : () => {\r\n            dispatch({\r\n                type: \"CHANGE_STATUS_EDIT\",\r\n\r\n            })\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ListNote)\r\n\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nclass NoteForm extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            noteTitle : '',\r\n            noteContent : '',\r\n        };\r\n    }\r\n    \r\n    changEvent = (event) =>{\r\n        var name = event.target.name;\r\n        var value = event.target.value;\r\n        console.log( value + \"   ----   \" + value);\r\n        this.setState({\r\n            [name] : value,\r\n        })\r\n    }\r\n    // this.state.title , this.state.content \r\n    addNote2 = (title, content ) =>{\r\n        var item = { };\r\n        item.noteTitle = title;\r\n        item.noteContent = content;\r\n        console.log(item);\r\n        // item = JSON.stringify(item);\r\n        // this.props.getData(item); React Thuần.\r\n        this.props.addNote(item);\r\n        this.setState({\r\n            noteTitle : '',\r\n            noteContent : '',\r\n        })\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"col-3\">\r\n                <p className=\"text-muted\">Add new note</p>\r\n                <div className=\"form-group\">\r\n                    <form>\r\n                    <small id=\"helpId\" className=\"text-muted\">title</small>\r\n                    <input onChange={ (event) => this.changEvent(event) } type=\"text\" name=\"noteTitle\"  className=\"form-control\" placeholder=\"title\" aria-describedby=\"Description\" />\r\n                    <small id=\"helpId\" className=\"text-muted\">Contents</small>\r\n                    <textarea onChange={ (event) => this.changEvent(event) } name=\"noteContent\" className=\"form-control\" rows={3} placeholder=\"Content\" />\r\n                    <div className=\"text-center pt-2\">\r\n                        <input onClick = { () => this.addNote2(this.state.noteTitle , this.state.noteContent ) } className=\"btn btn-info\" type=\"reset\" defaultValue=\"Add new\" />\r\n                    </div>\r\n                    </form>\r\n                </div>\r\n                </div>\r\n\r\n        );\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n    return {\r\n        addNote: (newItem) => {\r\n            dispatch({type:\"ADD_NOTE\" , newItem}) // cái tham số truyền vào phải giống với action.name bên reducer.\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(null, mapDispatchToProps) (NoteForm) ;","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\n\r\nclass NoteFormForEdit extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            // noteTitle : this.props.,\r\n            noteContent : '',\r\n            noteTitle : '',\r\n        }\r\n    }\r\n    \r\n    componentWillMount() {\r\n        if(this.props.dataReive){\r\n            this.setState({\r\n                id : this.props.dataReive.key,\r\n                noteTitle : this.props.dataReive.noteTitle,\r\n                noteContent : this.props.dataReive.noteContent\r\n            })\r\n        }\r\n    }\r\n    changEvent = (event) =>{\r\n        var name = event.target.name;\r\n        var value = event.target.value;\r\n        console.log( value + \"   ----   \" + value);\r\n        this.setState({\r\n            [name] : value,\r\n        })\r\n    }\r\n    actionForButtonUpdate = () =>{\r\n        this.props.changeStatusEdit();\r\n        var item = {};\r\n        item.id = this.state.id;\r\n        item.noteTitle = this.state.noteTitle;\r\n        item.noteContent = this.state.noteContent;\r\n        this.props.getItemToUpdate(item)\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"col-3\">\r\n                <p className=\"text-muted\">Add new note</p>\r\n                <div className=\"form-group\">\r\n                    <form>\r\n                    <small id=\"helpId\" className=\"text-muted\">title</small>\r\n                    <input onChange={ (event) => this.changEvent(event) } defaultValue= { this.props.dataReive.noteTitle } type=\"text\" name=\"noteTitle\"  className=\"form-control\" placeholder=\"title\" aria-describedby=\"Description\" />\r\n                    <small id=\"helpId\" className=\"text-muted\">Contents</small>\r\n                    <textarea defaultValue= { this.props.dataReive.noteContent } onChange={ (event) => this.changEvent(event) } name=\"noteContent\" className=\"form-control\" rows={3} placeholder=\"Content\" />\r\n                    <div className=\"text-center pt-2\">\r\n                        <input  onClick = { () => this.actionForButtonUpdate() }  className=\"btn btn-info\" type=\"reset\" defaultValue=\"Add new\" />\r\n                    </div>\r\n                    </form>\r\n                </div>\r\n                </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    return {\r\n        dataReive: state.getDataToEdit.editItemOfNote\r\n    }\r\n}\r\n\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n    return {\r\n        changeStatusEdit : () => {\r\n            dispatch({\r\n                type: \"CHANGE_STATUS_EDIT\",\r\n\r\n            })\r\n        },\r\n        getItemToUpdate : (Item) =>{\r\n            dispatch({\r\n                type : \"UPDATE_NOTE\",\r\n                Item\r\n        })\r\n            \r\n        }\r\n    }\r\n}\r\nexport default connect(mapStateToProps, mapDispatchToProps)(NoteFormForEdit)","import { fireBaseConnect } from './fireBaseConnect';\nimport React, { Component } from 'react';\nimport './App.css';\nimport Nav from './components/Nav';\nimport ListNote from './components/ListNote';\nimport NoteForm from './components/NoteForm';\nimport { connect } from 'react-redux'\nimport NoteFormForEdit from './components/NoteFormForEdit';\n// import * as firebase from 'firebase';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n\n    }\n  }\n  \n  addData = (item) => {\n    fireBaseConnect.push(item);\n  }\n  // pushData = () => {\n  //   const connectData = firebase.database().ref('dataForNote');\n  //   connectData.push({\n  //     title : \"3333\",\n  //     noteContent: \"nội dung ghi chú 3\"\n  //   });\n  //   //hàm push thì id tự sinh ra . còn hàm set thì  phải truy cập vo chinh cái bảng đó phải nhớ ID\n  // }\n  // deleteData = (id) => {\n  //   const connectData = firebase.database().ref('dataForNote');\n  //   connectData.child(id).remove();\n  // child là hàm tìm sau khi tìm xong thì làm gì.\n  //   console.log(\"ok\");\n  // }\n  showFormEdit = () =>{\n    console.log(this.props.isEditForNote);\n    if(this.props.isEditForNote){\n      return <NoteFormForEdit />\n    }\n  }\n  render() {\n    // fireBaseConnect.once('value').then(\n    //   function(datasnapshot) { console.log(datasnapshot.val()); }\n    // );\n    \n    \n    return (\n      <div className=\"My-App\">\n        <Nav />\n        <section id=\"list-note\" className=\"pt-5\">\n          <div className=\"container\">\n              <div className=\"row\">\n              <ListNote />\n              {/* <NoteForm getData = { (item) => this.addData(item)} /> */}\n              <NoteForm  />\n              </div>\n              {\n                this.showFormEdit()\n              }\n          </div>\n        </section>\n\n\n\n\n\n\n\n\n\n        <header className=\"App-header\">\n          \n        \n\n\n\n          \n\n          {/* <button onClick={ this.pushData() } className=\"btn btn-info\" >Add Push By FireBase</button>\n          <button onClick={ (id) => this.deleteData('-LbOyloreYAtdPj9yDAL') } className=\"btn btn-info\" >delte By FireBase</button> */}\n        </header>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    \n    isEditForNote: state.status.isEditForNote\n  }\n\n}\n\nexport default connect(mapStateToProps) (App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { fireBaseConnect } from './../fireBaseConnect'; // tham chiếu tới tham số .\r\n\r\nconst noteInitialState = [];\r\nconst FormNoteAdd = (state = noteInitialState, action) => {\r\n    switch (action.type) {\r\n        case \"ADD_NOTE\":\r\n        fireBaseConnect.push(action.newItem)\r\n        console.log(JSON.stringify(action.newItem) +\" da nhan\");\r\n            return state\r\n        default:\r\n        return state\r\n    }\r\n}\r\nexport default FormNoteAdd;","// import { fireBaseConnect } from './../fireBaseConnect'; // tham chiếu tới tham số .\r\n\r\nconst statusInitialState = {\r\n    isEditForNote : false\r\n};\r\n\r\n\r\n\r\n\r\nconst Status = (state = statusInitialState, action) => {\r\n    switch (action.type) {\r\n        case \"CHANGE_STATUS_EDIT\":\r\n        console.log(!state.isEditForNote);\r\n        return {...state, isEditForNote : !state.isEditForNote} \r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default Status;","import { fireBaseConnect } from './../fireBaseConnect';\r\n\r\nconst GetDataItemInitialState = {\r\n    editItemOfNote : {}\r\n}\r\nconst GetDataItemForUpdate = (state = GetDataItemInitialState, action) => {\r\n    switch (action.type) {\r\n        case \"GET_DATA_NOTE_TO_UPDATE\" :\r\n            console.log(action.Item);\r\n            return {...state, editItemOfNote : action.Item}\r\n        case \"UPDATE_NOTE\" :\r\n            // console.log(JSON.stringify(action.Item) +\" đã nhận\");\r\n            fireBaseConnect.child(action.Item.id).update({\r\n                noteTitle : action.Item.noteTitle,\r\n                noteContent : action.Item.noteContent\r\n            });\r\n            // return null;\r\n            return {...state, editItemOfNote :{}}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default GetDataItemForUpdate;","import { fireBaseConnect } from './../fireBaseConnect';\r\n\r\n\r\nconst DeleteByIdInitialState = {\r\n        idOfNote : ''\r\n}\r\nconst Delete = (state = DeleteByIdInitialState, action) => {\r\n    switch (action.type) {\r\n        case \"DELETE_NOTE_BY_ID\":\r\n            fireBaseConnect.child(action.GetId).remove();\r\n            return state\r\n        default:\r\n            return state\r\n    }\r\n}\r\nexport default Delete;","// import { fireBaseConnect } from './fireBaseConnect';\r\nimport FormNoteAdd from './reducer/FormNoteAdd';\r\nimport Status from './reducer/Status';\r\nimport GetData from './reducer/GetData';\r\nimport Delete from './reducer/Delete';\r\nconst redux = require('redux');\r\n\r\n\r\nconst allReducerNote = redux.combineReducers({\r\n    note : FormNoteAdd,\r\n    status : Status,\r\n    getDataToEdit : GetData,\r\n    deleteById : Delete,\r\n});\r\n\r\nconst storeForNote = redux.createStore(allReducerNote);\r\nstoreForNote.subscribe(function(){\r\n    JSON.stringify(storeForNote.getState());\r\n})\r\nexport default storeForNote;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport Store from './Store';\nReactDOM.render(\n<Provider store = { Store }>\n    <App />\n</Provider>\n, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}